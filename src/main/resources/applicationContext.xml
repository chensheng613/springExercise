<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/cache 
		http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/data/mongo
		http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task-3.0.xsd
		 http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">
	<import resource="classpath*:/dataSource.xml" />
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.mypro">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<context:annotation-config />
	<task:annotation-driven />
	<context:component-scan base-package="com.mypro.task" />
	<!-- 扫描该路径下的包，通过注解的方式注入进来 -->
	<context:component-scan base-package="com.mypro.aop" />
	<!-- 激活aop -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- <bean id="userService" class="com.mypro.aop.UserService" /> <bean id="managerService" 
		class="com.mypro.aop.ManagerService" /> -->
	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.mypro.entity" />
		<property name="persistenceUnitName" value="myproJpa"></property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.id.new_generator_mappings">true</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
	</bean>
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect"
				class="org.springside.modules.persistence.Hibernates">
				<constructor-arg ref="dataSource" />
			</bean>
		</property>
	</bean>
	<!-- ehcache缓存start -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<bean id="ehcacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache/ehcache-myPro.xml" />
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcacheManager" />
		<property name="transactionAware" value="true" />
	</bean>
	<!-- ehcache缓存end -->
	<jpa:repositories base-package="com.mypro.repository"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory">
	</jpa:repositories>
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- activeMQ -->
	<!-- MQ连接配置 -->
	<!-- <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL">
					<value>tcp://localhost:61616</value>
				</property>
			</bean>
		</property>
	</bean> -->
	<!-- Spring JMS Template -->
	<!-- <bean id="myJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory">
			<bean class="org.springframework.jms.connection.SingleConnectionFactory">
				<property name="targetConnectionFactory" ref="jmsFactory" />
			</bean>
		</property>
		<property name="receiveTimeout" value="60000"></property>
	</bean> -->

	<!-- 配置消息发送目的地方式 Queue队列：仅有一个订阅者会收到消息，消息一旦被处理就不会存在队列中 -->
<!-- 	<bean id="notifyQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="testQueue"></constructor-arg>
	</bean> -->

	<!-- 配置消息发送目的方式是主题 -->
	<!-- <bean id="notifyTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="testTopic"></constructor-arg>
	</bean> -->

	<!-- 使用Spring JmsTemplate 的消息生产者 -->
	<!-- <bean id="messageProducer" class="com.mypro.activeMQ.MessageProducer">
		<property name="myJmsTemplate" ref="myJmsTemplate" />
		<property name="notifyQueue" ref="notifyQueue" />
	</bean> -->

	<!-- 主题队列消息生产者 -->
	<!-- <bean id="topicMessageProducer" class="com.mypro.activeMQ.MessageTopicProducer">
		<property name="myJmsTemplate" ref="myJmsTemplate"></property>
		<property name="notifyTopic" ref="notifyTopic"></property>
	</bean> -->

	<!-- 队列消息消费者 -->
	<!-- <bean id="messageConsumer" class="com.mypro.activeMQ.MessageConsumer">
		<property name="myJmsTemplate" ref="myJmsTemplate" />
	</bean> -->

	<!-- 消息消费者 一般使用spring的MDP异步接收Queue模式 消息监听容器 -->
	<!-- <bean id="queueContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"></property>
		<property name="destination" ref="notifyQueue"></property>
		<property name="messageListener" ref="queueMessageListener"></property>
	</bean>
	<bean id="queueContainer2"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"></property>
		<property name="destination" ref="notifyQueue"></property>
		<property name="messageListener" ref="queueMessageListener2"></property>
	</bean> -->
	<!-- 监听者 -->
	<!-- <bean id="queueMessageListener" class="com.mypro.activeMQ.QueueMessageListener"></bean>
	<bean id="queueMessageListener2" class="com.mypro.activeMQ.QueueMessageListener2"></bean> -->

	<!-- 主题监听 -->
	<!-- <bean id="topicContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"></property>
		<property name="destination" ref="notifyTopic"></property>
		<property name="messageListener" ref="topicMessageListener"></property>
	</bean>
	<bean id="topicContainer2"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"></property>
		<property name="destination" ref="notifyTopic"></property>
		<property name="messageListener" ref="topicMessageListener2"></property>
	</bean> -->
<!-- 	<jms:listener-container destination-type="topic"
		connection-factory="jmsFactory" acknowledge="auto" container-type="default">
		<jms:listener destination="notifyTopic" ref="topicMessageListener" />
		<jms:listener destination="notifyTopic" ref="topicMessageListener2" />
	</jms:listener-container> -->
	<!-- 监听者 -->
	<!-- <bean id="topicMessageListener" class="com.mypro.activeMQ.TopicMessageListener"></bean>
	<bean id="topicMessageListener2" class="com.mypro.activeMQ.TopicMessageListener2"></bean> -->

</beans>